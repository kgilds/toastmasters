dta.r <- abs(cor(dta)) # get correlations
dta.col <- dmat.color(dta.r) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
dta.o <- order.single(dta.r)
cpairs(dta, dta.o, panel.colors=dta.col, gap=.5,
main="Variables Ordered and Colored by Correlation" )
install.packages("gclus")
dta<- bb1 # get data
dta.r <- abs(cor(dta)) # get correlations
dta.col <- dmat.color(dta.r) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
dta.o <- order.single(dta.r)
cpairs(dta, dta.o, panel.colors=dta.col, gap=.5,
main="Variables Ordered and Colored by Correlation" )
library("gclus", lib.loc="C:/Users/kevin/Documents/R/win-library/3.0")
dta<- bb1 # get data
dta.r <- abs(cor(dta)) # get correlations
dta.col <- dmat.color(dta.r) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
dta.o <- order.single(dta.r)
cpairs(dta, dta.o, panel.colors=dta.col, gap=.5,
main="Variables Ordered and Colored by Correlation" )
bb$bat_avg
bb$bat_avg*1000
bb$new_onbase*1000
transform(bb$bat_avg*1000)
dta<- bb1 # get data
dta.r <- abs(cor(dta)) # get correlations
dta.col <- dmat.color(dta.r) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
dta.o <- order.single(dta.r)
cpairs(dta, dta.o, panel.colors=dta.col, gap=.5,
main="Variables Ordered and Colored by Correlation" )
dta<- bb1 # get data
dta.r <- abs(cor(dta)) # get correlations
dta.col <- dmat.color(dta.r) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
dta.o <- order.single(dta.r)
cpairs(dta, dta.o, panel.colors=dta.col, gap=.5,
main="Variables Ordered and Colored by Correlation" )
replace(bb$bat_avg*1000)
replace(bb$bat_avg,bb$bat_avg*1000)
library("slidify", lib.loc="C:/Users/kevin/Documents/R/win-library/3.0")
divE<-filter(tm,Division=="E")
order<-arrange(divE,desc(Club.Name))
load("C:/Users/kevin/Dropbox/RBackup/R/Projects/Dataviz/.RData")
bp<-barplot(Youth, main="Number of Youth Served By Year", xlab="Number of Youth Served", ylab="Program Year" axes=FALSE,
col=c("#92C5C6","#92C5C6","#92C5C6","#92C5C6","#92C5C6","#31737F"),
names.arg = c ("'07","'08","'09","'10","'11","'12"))
abline(h=0, col="gray")
text(.70,191, "202", col="White", cex=1.5)
text(1.90,265, "278", col="White", cex=1.5)
text(3.1,398, "410", col="White",cex=1.5)
text(4.3,405, "416", col="White",cex=1.5)
text(5.5,440, "450", col="White",cex=1.5)
text(6.7,460, "470", col="White",cex=1.5)
Youth <-c(202,278, 410, 416, 450, 470)
bp<-barplot(Youth, main="Number of Youth Served By Year", xlab="Number of Youth Served", ylab="Program Year" axes=FALSE,
col=c("#92C5C6","#92C5C6","#92C5C6","#92C5C6","#92C5C6","#31737F"),
names.arg = c ("'07","'08","'09","'10","'11","'12"))
abline(h=0, col="gray")
text(.70,191, "202", col="White", cex=1.5)
text(1.90,265, "278", col="White", cex=1.5)
text(3.1,398, "410", col="White",cex=1.5)
text(4.3,405, "416", col="White",cex=1.5)
text(5.5,440, "450", col="White",cex=1.5)
text(6.7,460, "470", col="White",cex=1.5)
Youth <-c(202,278, 410, 416, 450, 470)
bp<-barplot(Youth, main="Number of Youth Served By Year", xlab="Number of Youth Served", ylab="Program Year" axes=FALSE,
bp<-barplot(Youth, main="Number of Youth Served By Year", xlab="Number of Youth Served", ylab="Program Year",axes=FALSE,
col=c("#92C5C6","#92C5C6","#92C5C6","#92C5C6","#92C5C6","#31737F"),
names.arg = c ("'07","'08","'09","'10","'11","'12"))
abline(h=0, col="gray")
text(.70,191, "202", col="White", cex=1.5)
text(1.90,265, "278", col="White", cex=1.5)
text(3.1,398, "410", col="White",cex=1.5)
text(4.3,405, "416", col="White",cex=1.5)
text(5.5,440, "450", col="White",cex=1.5)
text(6.7,460, "470", col="White",cex=1.5)
Youth <-c(202,278, 410, 416, 450, 470)
bp<-barplot(Youth, main="Number of Youth Served By Year", xlab="Program Year", ylab="Number of Youth Served",axes=FALSE,
col=c("#92C5C6","#92C5C6","#92C5C6","#92C5C6","#92C5C6","#31737F"),
names.arg = c ("'07","'08","'09","'10","'11","'12"))
abline(h=0, col="gray")
text(.70,191, "202", col="White", cex=1.5)
text(1.90,265, "278", col="White", cex=1.5)
text(3.1,398, "410", col="White",cex=1.5)
text(4.3,405, "416", col="White",cex=1.5)
text(5.5,440, "450", col="White",cex=1.5)
text(6.7,460, "470", col="White",cex=1.5)
library("slidify", lib.loc="C:/Users/kevin/Documents/R/win-library/3.0")
pwd
install.packages(c("googleVis", "markdown", "yaml"))
library("RQDA", lib.loc="C:/Users/kevin/Documents/R/win-library/3.0")
RQDA()
1/0
x <- 0:6
> class(x)
[1] "integer"
> as.numeric(x)
x <- 0:6
x
as.numeric(X)
as.numeric(x)
class(x)
as.numeric(x)
x <- list(1, "a", TRUE, 1 + 4i)
x
library("swirl", lib.loc="C:/Users/kevin/Documents/R/win-library/3.0")
R Programming
R Programming
install.packages("swirl")
R Programming
R Programming
a <- 317KWG010475
a <- "317KWG010475"
source('~/.active-rstudio-document', echo=TRUE)
add2(10,2)
for(i in 1:10) {
print(i)
}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
dataset.url <- "http://dl.dropboxusercontent.com/u/8036886/diet_data.zip"
download.file(dataset.url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
?pie
main = "pie(*, labels=\"\", col=rainbow(n), border=NA,..")
```
"Apple")
pie(pie.sales, col = c("purple", "violetred1", "green3",))
pie(pie.sales, col = gray(seq(0.4, 1.0, length = 6)))
pie.sales <- c(.25, 0.50, 0.75,)
names(pie.sales) <- c("Blueberry", "Cherry","Apple")
pie(pie.sales) # default colours
pie(pie.sales, col = c("purple", "violetred1", "green3",))
pie(pie.sales, col = gray(seq(0.4, 1.0, length = 6)))
pie(pie.sales, density = 10, angle = 15 + 10 * 1:6)
pie(pie.sales, clockwise = TRUE, main = "pie(*, clockwise = TRUE)")
segments(0, 0, 0, 1, col = "red", lwd = 2)
text(0, 1, "init.angle = 90", col = "red")
```
?pie
?dotplot
pie.sales <- c(.15, 0.35, 0.66 )
names(pie.sales) <- c("Blueberry", "Cherry","Apple")
class(pie.sales)
piesales1<-data.frame(pie.sales)
piesales1
piesales1
ggplot(piesales1, aes(x=flavors, fill=flavors, y=pie.sales)) + geom_freqpoly(group = "pie.sales") +ggtitle("Pie Sales by Percentage")
?wd
?swd
?getwd
a <- c(1,2,3)
b <- c(4,56)
x<- data.fram(a,b)
x<- data.frame(a,b)
a <- c(1,2,3)
b <- c(4,5,6)
x<- data.frame(a,b)
x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print "Hello World"
library("RQDA", lib.loc="~/R/win-library/3.0")
library("installr", lib.loc="~/R/win-library/3.0")
updateR()
library("RQDA", lib.loc="~/R/win-library/3.1")
summaryCodings()
getCodingTable()
152+422
574/2
2/574
536+25
318/534
194/290
194/239
library("RQDA", lib.loc="~/R/win-library/3.1")
library("ggmap", lib.loc="~/R/win-library/3.1")
detach("package:ggplot2", unload=TRUE)
geocode('Tampa, FL')
geocode('Jacksonville, FL')
geocode("Sarasota, FL")
geocode('Orlando, FL')
geocode('Panama City, FL')
geocode('Jupiter, FL')
geocode('Miami, FL')
mydata <- data.frame(age=numeric(0), gender=character(0), weight=numeric(0))
mydata <- edit(mydata)
enrollment <- data.frame(council=character(0),longitude=numeric(0), latitude=numeric(0), numberEnrolled=numeric(0))
enrollment <- edit(enrollment)
enrollment
names(enrollment)
MakeMap(enrollment$longitue, enrollment$lattitude)
MakeMap(enrollment$longitue, enrollment$lattitude)
detach("package:ggmap", unload=TRUE)
MakeMap(enrollment$longitue, enrollment$lattitude)
MakeMap(enrollment$longitude, enrollment$latitude)
makeMap(enrollment$longitude, enrollment$latitude)
makemap(enrollment$longitude, enrollment$latitude)
library("maps", lib.loc="~/R/win-library/3.1")
makemap(enrollment$longitude, enrollment$latitude)
MakeMap(enrollment$longitude, enrollment$latitude)
MakeMap(labike$latitude, labike$longitude)
MakeMap(enrollment$latitude, enrollment$longitude)
get_map(enrollment)
library("ggmap", lib.loc="~/R/win-library/3.1")
get_map(enrollment)
?get_map
GetMap(enrollment$latitude, enrollment$longitude)
GetMap(enrollment$latitude, enrollment$longitude)
names(enrollment)
GetMap(enrollment$latitude, enrollment$longitude)
library("RgoogleMaps", lib.loc="~/R/win-library/3.1")
GetMap(enrollment$latitude, enrollment$longitude)
GetMap(enrollment$latitude, enrollment$longitude)
198+618+58+131+125+193
83 + 60 +57
198 + 618 +58 +131 + 200 +125 +193
x <- 1:10
z <- NULL
for(i in seq(along=x)) {
if (x[i]<5) {
z <- c(z,x[i]-1)
} else {
stop("values need to be <5")
}
}
z <- 0
while(z < 5) {
z <- z + 2
print(z)
}
x <- 1:10 # Creates sample data
ifelse(x<5 | x>8, x, 0)
x <- 1:10 # Creates sample data
ifelse(x<5 | x>8, x, 5)
x <- 1:10 # Creates sample data
ifelse(x<5 | x>8, x, 10)
x <- 1:10 # Creates sample data
ifelse(x<5 | x>8, x, 0)
df <- null
df <- c(A,B,C,D)
df <- c(A,B,C,D)
df <- (A,B,C,D)
df <- A,B,C,D
df <- (c(A,B,C,D))
df <- A
df <- ('a','b','c','d','f')
df <- ('a','b','c','d','f')
df <- ('a','b','c','d','f')
df <- 'a'
df <- 'a', 'b'
df <- c('a', 'b')
df <- c('a', 'b', 'c', 'd','f')
df <- c('a', 'b', 'c', 'd','f')
for grades in df
print grades
for grades in df
16+16+7+3
31/42
10/42
67+108+49+15+8
60+119+50+9+9
194/247
24/247
55/247
15+24+5+1
9+20+11+5
22/45
60+65+27+6+3
143/161
37/161
9/161
9+28+14+9+2
3+24+22+10+3
31/62
14/62
6/62
11/42
4/42
1/42
edit(data)
10/247
4/247
5/247
7/45
8+20+9+1+2
17+10+10+2+1
38/40
16/40
88/92
36/92
18/92
6/92
7/40
7+11+2+1
19/21
7/21
7/21
3/22
4/22
7+10+5
5+13+4
14+10+3
14+10+1+4+1
14+10+2+1
14+10+2+2+1
14+10+1+2+1
6+9+3+6+5
files_full <- list.files("diet_data", full.names=TRUE)
files_full
getwd()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
head(read.csv(files_full[3]))
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
library("ggmap", lib.loc="~/R/win-library/3.1")
geocode('Tampa, FL')
geocode('Jacksonville, FL')
geocode("Sarasota, FL")
geocode('Orlando, FL')
geocode('Panama City, FL')
geocode('Jupiter, FL')
geocode('Miami, FL')
apImageData1 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "satellite",
zoom = 17)
ggmap(mapImageData1,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData1 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "satellite",
zoom = 17)
ggmap(mapImageData1,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
geocode(520 Hillside Drive, Lakeland, FL 33803)
geocode("520 Hillside Drive, Lakeland, FL 33803")
mapImageData1 <- get_map(location = c(lon = -81.95078, lat = 27.99826),
color = "color",
source = "google",
maptype = "satellite",
zoom = 17)
ggmap(mapImageData1,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
library("RQDA", lib.loc="~/R/win-library/3.1")
install.packages("ggvis")
library("RQDA", lib.loc="~/R/win-library/3.1")
library("RQDA", lib.loc="~/R/win-library/3.1")
summary
library("RQDA", lib.loc="~/R/win-library/3.1")
SummaryCodings()
SummaryCodings()
SummaryCodings(byFile)
SummaryCodings()
summaryCodings(byFile = FALSE, ...)
SummaryCodings(teacherQualitative070914)
?SummaryCodings
summaryCodings()
print "Hello World"
print "Hellow World"
library("RQDA", lib.loc="~/R/win-library/3.1")
install.packages("httpuv")
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "2cb277fca56351a723e8", "48e3eb8ccebadb14efa56a3f1a4287be64a81e03")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library("jsonlite", lib.loc="~/R/win-library/3.1")
jsonData <- ("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData <-from JSON ("https://api.github.com/users/jtleek/repos")
jsonData <-fromJSON ("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$created_at)
names(jsonData$owners)
names(jsonData$owner)
names(jsonData$created_at)
names(jsonData$created_at)
names(jsonData)
names(jsonData$name)
names(jsonData$full_name)
jsonData <-fromJSON ("https://api.github.com/users/jtleek/repos")
names(jsonData$full_name)
names(jsonData$owner)
names(jsonData$id)
names(jsonData$owner)
names(jsonData$id)
names(jsonData)
names(jsonData$"id")
names(jsonData$id)
names(jsonData[1])
names(jsonData$id)
names(jsonData$owner)
names(jsonData$owner$created_at)
library("RQDA", lib.loc="~/R/win-library/3.1")
105+89
105/194
232+150
81+29
81/110
25+22
25/47
174+93
105+232+4+81+25+174
105+232+81+25+174
194+382+4+110+47+267
194+382+3+110+47+267
89+150+3+29+22+93
617/1003
617+386
153+41
153/194
258+124
258/382
96+14
96/110
42+5
42/47
231+36
231/267
153+258+3+96+42+231
41+124+14+5+36
194+382+3+110+47+267
783/1003
71+123
71/194
160+222
160/382
1/3
44+66
44/110
17+30
17/47
127+140
127/267
?hist
71+160+1+44+17+127
123+222+2+66+30+140
194+382+3+110+47+267
420/1003
382+3+110+47+267+
Girl Scout Council    Girl Survey	Q1 Grades	Parent Survey	Teacher Survey
Gateway Council	382	277	223	225
Panhandle Council	3	14	3	3
Souteast Council	110	98	55	14
Tropical Council	47	55	0	0
382+3+110+47+267
809+194
15+15+13+4+4+2
53+16
105+160.5+115+70+28+237
library(httr)
token_url = "https://api.fitbit.com/oauth/request_token"
access_url = "https://api.fitbit.com/oauth/access_token
auth_url = "http://www.fitbit.com/oauth/authorize"
key = "7d7a7d6b8ccd4bb4b432ca859c0285bd"
secret = "b6b47a5b8f69440da1862c9b7011a31a"
fbr = oauth_app('Kevin's run,key,secret)
fitbit = oauth_endpoint(token_url,auth_url,access_url)
token = oauth1.0_token(fitbit,fbr)
sig = sign_oauth1.0(fbr, token=token$oauth_token, token_secret=token$oauth_token_secret)
steps = GET("http://api.fitbit.com/1/user/-/activities/steps/date/01/01/2015/today.json",sig)
library(httr)
token_url = "https://api.fitbit.com/oauth/request_token"
access_url = "https://api.fitbit.com/oauth/access_token"
auth_url = "http://www.fitbit.com/oauth/authorize"
key = "7d7a7d6b8ccd4bb4b432ca859c0285bd"
secret = "b6b47a5b8f69440da1862c9b7011a31a"
fbr = oauth_app('Kevin's run,key,secret)
fitbit = oauth_endpoint(token_url,auth_url,access_url)
token = oauth1.0_token(fitbit,fbr)
sig = sign_oauth1.0(fbr, token=token$oauth_token, token_secret=token$oauth_token_secret)
fbr = oauth_app("Kevin's run",key,secret)
fitbit = oauth_endpoint(token_url,auth_url,access_url)
token = oauth1.0_token(fitbit,fbr)
setwd("C:/Users/kevin/Dropbox/Toastmasters/Contest")
nzip(zipfile, files = contest.zip)
unzip(zipfile, files = contest.zip)
unzip(contest.zip)
unzip("contest.zip")
